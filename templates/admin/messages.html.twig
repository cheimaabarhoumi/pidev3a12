{% extends 'admin/base_admin.html.twig' %}

{% block title %}Messages{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .message-actions {
            margin-left: 10px;
        }
        .message-actions-btn {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            padding: 0 5px;
        }
        .message-actions-btn:hover {
            color: #dc3545;
        }
        .list-group-item {
            position: relative;
        }
        #search-results {
            position: absolute;
            z-index: 1000;
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 6px 12px rgba(0,0,0,.175);
            display: none;
        }
        .search-result-item {
            padding: 8px 15px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }
        .search-result-item:hover {
            background-color: #f8f9fa;
        }
        .search-result-item:last-child {
            border-bottom: none;
        }
        .search-highlight {
            background-color: #fffde7;
            font-weight: bold;
        }
        .no-results {
            padding: 10px;
            color: #6c757d;
            text-align: center;
        }
    </style>
{% endblock %}

{% block body %}
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Your Messages</h1>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">Conversations</h6>
        <div class="search-container" style="position: relative; width: 300px;">
            <input type="text" id="user-search" class="form-control" placeholder="Search by recipient name..." autocomplete="off">
            <div id="search-results"></div>
        </div>
    </div>
    <div class="card-body">
        <div class="list-group" id="messages-list">
            {% for message in messages %}
            <div class="list-group-item list-group-item-action flex-column align-items-start message-item" 
                 data-user-name="{{ message.recipient ? message.recipient.prenom ~ ' ' ~ message.recipient.nom : '' }}"
                 data-ticket-id="{{ message.ticket.ticketId }}"
                 data-message-id="{{ message.id }}">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">
                        <a href="{{ path('admin_conversation', {'ticketId': message.ticket.ticketId}) }}" class="text-decoration-none text-dark">
                            {% if message.recipient %}
                                <span class="recipient-name">{{ message.recipient.prenom }} {{ message.recipient.nom }}</span>
                            {% else %}
                                <span>Unknown Recipient</span>
                            {% endif %}
                        </a>
                    </h5>
                    <div class="d-flex align-items-center">
                        <small class="text-muted mr-2">{{ message.createdAt|date('Y-m-d H:i') }}</small>
                        <div class="message-actions">
                            <button class="message-actions-btn" onclick="event.stopPropagation(); deleteMessage({{ message.id }}, this)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <a href="{{ path('admin_conversation', {'ticketId': message.ticket.ticketId}) }}" class="text-decoration-none text-dark">
                    <p class="mb-1 message-content">{{ message.content|length > 100 ? message.content|slice(0, 100) ~ '...' : message.content }}</p>
                    <small class="text-muted">Ticket #{{ message.ticket.ticketId }} - {{ message.ticket.title }}</small>
                </a>
            </div>
            {% else %}
            <div class="alert alert-info">No messages found</div>
            {% endfor %}
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/mark.js@8.11.1/dist/mark.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const userSearch = document.getElementById('user-search');
        const searchResults = document.getElementById('search-results');
        const messagesList = document.getElementById('messages-list');
        let controller = null; // For aborting previous requests
        
        // Debounce function to limit API calls
        function debounce(func, wait) {
            let timeout;
            return function() {
                const context = this, args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(context, args);
                }, wait);
            };
        }
        
        // Highlight search terms in results
        function highlightText(element, term) {
            const instance = new Mark(element);
            instance.unmark();
            instance.mark(term, {
                className: 'search-highlight',
                separateWordSearch: true,
                diacritics: true
            });
        }
        
        // AJAX search function
        const performSearch = debounce(function(searchTerm) {
            // Abort previous request if exists
            if (controller) {
                controller.abort();
            }
            controller = new AbortController();
            
            if (searchTerm.length < 2) {
                searchResults.style.display = 'none';
                // Show all messages when search is cleared
                document.querySelectorAll('.message-item').forEach(item => {
                    item.style.display = 'flex';
                });
                return;
            }
            
            fetch('{{ path('admin_message_search') }}?q=' + encodeURIComponent(searchTerm), {
                signal: controller.signal
            })
            .then(response => response.json())
            .then(data => {
                searchResults.innerHTML = '';
                
                if (data.length === 0) {
                    searchResults.innerHTML = '<div class="no-results">No matching messages found</div>';
                    searchResults.style.display = 'block';
                    
                    // Hide all messages in main list during search
                    document.querySelectorAll('.message-item').forEach(item => {
                        item.style.display = 'none';
                    });
                    return;
                }
                
                data.forEach(message => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'search-result-item';
                    resultItem.innerHTML = `
                        <div>
                            <strong class="recipient-name">${message.recipient || 'Unknown Recipient'}</strong>
                            <small class="text-muted float-right">${message.createdAt}</small>
                        </div>
                        <div class="message-preview">${message.content.substring(0, 80)}${message.content.length > 80 ? '...' : ''}</div>
                        <small class="text-muted">Ticket #${message.ticketId} - ${message.ticketTitle}</small>
                    `;
                    
                    // Highlight search terms
                    highlightText(resultItem, searchTerm);
                    
                    // Click handler for search results
                    resultItem.addEventListener('click', () => {
                        window.location.href = `/admin/conversation/${message.ticketId}`;
                    });
                    
                    searchResults.appendChild(resultItem);
                });
                
                searchResults.style.display = 'block';
                
                // Hide non-matching messages in main list
                document.querySelectorAll('.message-item').forEach(item => {
                    const userName = item.getAttribute('data-user-name').toLowerCase();
                    item.style.display = userName.includes(searchTerm.toLowerCase()) ? 'flex' : 'none';
                });
            })
            .catch(error => {
                if (error.name !== 'AbortError') {
                    console.error('Search error:', error);
                }
            });
        }, 300);
        
        // Event listeners
        userSearch.addEventListener('input', function() {
            performSearch(this.value.trim());
        });
        
        // Hide results when clicking outside
        document.addEventListener('click', function(e) {
            if (!userSearch.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.style.display = 'none';
            }
        });
        
        // Preserve search on page refresh
        if (sessionStorage.getItem('messageSearch')) {
            userSearch.value = sessionStorage.getItem('messageSearch');
            performSearch(userSearch.value);
        }
        
        // Store search term in session storage
        userSearch.addEventListener('change', function() {
            sessionStorage.setItem('messageSearch', this.value);
        });
    });

    function deleteMessage(messageId, element) {
        if (confirm('Are you sure you want to delete this message?')) {
            fetch('{{ path('admin_delete_message') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ id: messageId })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Remove the message item from the list
                    const messageItem = element.closest('.message-item');
                    messageItem.style.transition = 'opacity 0.3s';
                    messageItem.style.opacity = '0';
                    
                    setTimeout(() => {
                        messageItem.remove();
                        
                        // If no messages left, show the empty message
                        if (document.querySelectorAll('.message-item').length === 0) {
                            document.getElementById('messages-list').innerHTML = 
                                '<div class="alert alert-info">No messages found</div>';
                        }
                    }, 300);
                } else {
                    showAlert('Error deleting message', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error deleting message', 'danger');
            });
        }
    }
    
    function showAlert(message, type) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.style.position = 'fixed';
        alert.style.top = '20px';
        alert.style.right = '20px';
        alert.style.zIndex = '1100';
        alert.innerHTML = `
            ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        `;
        
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.remove();
        }, 5000);
    }
</script>
{% endblock %}